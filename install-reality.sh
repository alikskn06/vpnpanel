#!/bin/bash

# VLESS XTLS-Reality VPN Kurulum
# En g√ºvenli ve DPI bypass

set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}"
cat << "EOF"
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë     VLESS XTLS-Reality - G√ºvenli & DPI Bypass        ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
echo -e "${NC}"

if [[ $EUID -ne 0 ]]; then
   echo -e "${RED}Bu script root olarak √ßalƒ±≈ütƒ±rƒ±lmalƒ±!${NC}"
   exit 1
fi

echo -e "${GREEN}[1/9] Sistem g√ºncelleniyor...${NC}"
export DEBIAN_FRONTEND=noninteractive
apt update -y
apt upgrade -y

echo -e "${GREEN}[2/9] Gerekli paketler kuruluyor...${NC}"
apt install -y curl wget unzip jq ufw socat cron openssl net-tools

echo -e "${GREEN}[3/9] Sunucu bilgileri alƒ±nƒ±yor...${NC}"
echo ""
read -p "Sunucu IP adresi: " SERVER_IP
if [[ -z "$SERVER_IP" ]]; then
    echo -e "${RED}IP adresi bo≈ü bƒ±rakƒ±lamaz!${NC}"
    exit 1
fi

# IP format kontrol√º
if ! [[ $SERVER_IP =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Ge√ßersiz IP formatƒ±, devam ediliyor...${NC}"
fi

read -p "Port numarasƒ± [443]: " PORT
PORT=${PORT:-443}

# Port kontrol√º
if ! [[ $PORT =~ ^[0-9]+$ ]] || [ $PORT -lt 1 ] || [ $PORT -gt 65535 ]; then
    echo -e "${RED}Ge√ßersiz port! 1-65535 arasƒ± olmalƒ±.${NC}"
    exit 1
fi

read -p "Kullanƒ±cƒ± sayƒ±sƒ± [3]: " USER_COUNT
USER_COUNT=${USER_COUNT:-3}

# Kullanƒ±cƒ± sayƒ±sƒ± kontrol√º
if ! [[ $USER_COUNT =~ ^[0-9]+$ ]] || [ $USER_COUNT -lt 1 ]; then
    echo -e "${RED}Kullanƒ±cƒ± sayƒ±sƒ± en az 1 olmalƒ±!${NC}"
    exit 1
fi

echo ""
echo -e "${YELLOW}Reality Destination (Maskeleme Sitesi):${NC}"
echo "1. www.microsoft.com   (√ñnerilen - Stabil)"
echo "2. www.cloudflare.com  (Hƒ±zlƒ±)"
echo "3. www.amazon.com      (G√ºvenilir)"
echo "4. www.apple.com       (iOS i√ßin ideal)"
echo "5. www.google.com      (Pop√ºler)"
echo "6. √ñzel domain gir"
echo ""
read -p "Se√ßiminiz [1]: " DEST_CHOICE
DEST_CHOICE=${DEST_CHOICE:-1}

case $DEST_CHOICE in
    1) DEST_SITE="www.microsoft.com" ;;
    2) DEST_SITE="www.cloudflare.com" ;;
    3) DEST_SITE="www.amazon.com" ;;
    4) DEST_SITE="www.apple.com" ;;
    5) DEST_SITE="www.google.com" ;;
    6) 
        read -p "√ñzel domain (√∂rn: www.example.com): " CUSTOM_DEST
        if [[ -z "$CUSTOM_DEST" ]]; then
            echo -e "${RED}Domain bo≈ü bƒ±rakƒ±lamaz!${NC}"
            exit 1
        fi
        DEST_SITE="$CUSTOM_DEST"
        ;;
    *) 
        echo -e "${YELLOW}Ge√ßersiz se√ßim, varsayƒ±lan kullanƒ±lƒ±yor...${NC}"
        DEST_SITE="www.microsoft.com"
        ;;
esac

echo -e "${BLUE}‚úì Se√ßilen Destination: ${DEST_SITE}${NC}"

# Destination eri≈üilebilirlik kontrol√º
echo -e "${GREEN}Destination eri≈üilebilirliƒüi test ediliyor...${NC}"
if timeout 5 bash -c "curl -sI https://${DEST_SITE} > /dev/null 2>&1"; then
    echo -e "${GREEN}‚úì ${DEST_SITE} eri≈üilebilir${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  ${DEST_SITE} eri≈üiminde sorun olabilir, devam ediliyor...${NC}"
fi

echo -e "${GREEN}[4/9] Xray Core kuruluyor...${NC}"
if ! bash -c "$(curl -L https://github.com/XTLS/Xray-install/raw/main/install-release.sh)" @ install; then
    echo -e "${RED}Xray kurulumu ba≈üarƒ±sƒ±z!${NC}"
    exit 1
fi

# Xray binary kontrol√º
if ! command -v xray &> /dev/null; then
    echo -e "${RED}Xray y√ºklenmedi!${NC}"
    exit 1
fi

XRAY_VERSION=$(xray version 2>&1 | head -n 1)
echo -e "${BLUE}‚úì Xray y√ºklendi: ${XRAY_VERSION}${NC}"

echo -e "${GREEN}[5/9] UUID ve Reality Keypair olu≈üturuluyor...${NC}"

# UUID'ler olu≈ütur
UUIDS_FILE="/tmp/xray_uuids_$$.txt"
> "$UUIDS_FILE"

for ((i=1; i<=$USER_COUNT; i++)); do
    UUID=$(xray uuid)
    if [[ -z "$UUID" ]]; then
        echo -e "${RED}UUID olu≈üturulamadƒ±!${NC}"
        rm -f "$UUIDS_FILE"
        exit 1
    fi
    echo "$UUID" >> "$UUIDS_FILE"
    echo -e "${BLUE}Kullanƒ±cƒ± $i UUID: $UUID${NC}"
done

# Reality keypair olu≈ütur
KEYS_FILE="/tmp/xray_keys_$$.txt"
xray x25519 > "$KEYS_FILE" 2>&1

# Farklƒ± format deneme
PRIVATE_KEY=$(grep -i "private" "$KEYS_FILE" | awk '{print $NF}' | tr -d ' \r\n')
PUBLIC_KEY=$(grep -i "public" "$KEYS_FILE" | awk '{print $NF}' | tr -d ' \r\n')

# Eƒüer bo≈üsa ba≈üka formatlarƒ± dene
if [[ -z "$PRIVATE_KEY" ]]; then
    PRIVATE_KEY=$(grep "PrivateKey:" "$KEYS_FILE" | cut -d':' -f2 | tr -d ' \r\n')
fi
if [[ -z "$PUBLIC_KEY" ]]; then
    PUBLIC_KEY=$(grep "PublicKey:" "$KEYS_FILE" | cut -d':' -f2 | tr -d ' \r\n')
fi

echo -e "${BLUE}Private Key: $PRIVATE_KEY${NC}"
echo -e "${BLUE}Public Key: $PUBLIC_KEY${NC}"

if [[ -z "$PRIVATE_KEY" ]] || [[ -z "$PUBLIC_KEY" ]]; then
    echo -e "${RED}Keypair olu≈üturulamadƒ±!${NC}"
    echo -e "${YELLOW}Key dosyasƒ± i√ßeriƒüi:${NC}"
    cat "$KEYS_FILE"
    rm -f "$UUIDS_FILE" "$KEYS_FILE"
    exit 1
fi

# Short ID olu≈ütur
SHORT_ID=$(openssl rand -hex 8)
echo -e "${BLUE}Short ID: $SHORT_ID${NC}"

echo -e "${GREEN}[6/9] Xray config dosyasƒ± olu≈üturuluyor...${NC}"

CONFIG_FILE="/usr/local/etc/xray/config.json"
CONFIG_DIR=$(dirname "$CONFIG_FILE")

# Config dizini olu≈ütur
mkdir -p "$CONFIG_DIR"

# Client array olu≈ütur
CLIENTS_ARRAY="["
FIRST=true
USER_INDEX=0

while IFS= read -r UUID; do
    if [[ -z "$UUID" ]]; then
        continue
    fi
    
    if [[ "$FIRST" = false ]]; then
        CLIENTS_ARRAY="${CLIENTS_ARRAY},"
    fi
    FIRST=false
    USER_INDEX=$((USER_INDEX+1))
    
    CLIENTS_ARRAY="${CLIENTS_ARRAY}
    {
      \"id\": \"${UUID}\",
      \"flow\": \"xtls-rprx-vision\"
    }"
done < "$UUIDS_FILE"

CLIENTS_ARRAY="${CLIENTS_ARRAY}
  ]"

# Config dosyasƒ± olu≈ütur
cat > "$CONFIG_FILE" << 'CONFIGEOF'
{
  "log": {
    "loglevel": "warning",
    "access": "/var/log/xray/access.log",
    "error": "/var/log/xray/error.log"
  },
  "inbounds": [
    {
      "listen": "0.0.0.0",
      "port": PORT_PLACEHOLDER,
      "protocol": "vless",
      "settings": {
        "clients": CLIENTS_PLACEHOLDER,
        "decryption": "none"
      },
      "streamSettings": {
        "network": "tcp",
        "security": "reality",
        "realitySettings": {
          "show": false,
          "dest": "DEST_PLACEHOLDER:443",
          "xver": 0,
          "serverNames": ["DEST_PLACEHOLDER"],
          "privateKey": "PRIVATE_KEY_PLACEHOLDER",
          "shortIds": ["", "SHORT_ID_PLACEHOLDER"]
        }
      }
    }
  ],
  "outbounds": [
    {
      "protocol": "freedom",
      "tag": "direct"
    },
    {
      "protocol": "blackhole",
      "tag": "block"
    }
  ],
  "routing": {
    "rules": [
      {
        "type": "field",
        "ip": [
          "geoip:private"
        ],
        "outboundTag": "block"
      }
    ]
  }
}
CONFIGEOF

# Placeholder'larƒ± deƒüi≈ütir
sed -i "s/PORT_PLACEHOLDER/${PORT}/g" "$CONFIG_FILE"
sed -i "s/DEST_PLACEHOLDER/${DEST_SITE}/g" "$CONFIG_FILE"
sed -i "s/PRIVATE_KEY_PLACEHOLDER/${PRIVATE_KEY}/g" "$CONFIG_FILE"
sed -i "s/SHORT_ID_PLACEHOLDER/${SHORT_ID}/g" "$CONFIG_FILE"
sed -i "s|CLIENTS_PLACEHOLDER|${CLIENTS_ARRAY}|g" "$CONFIG_FILE"

# Log dizini olu≈ütur
mkdir -p /var/log/xray
chmod 755 /var/log/xray

echo -e "${GREEN}[7/9] Config dosyasƒ± test ediliyor...${NC}"

# Private key kontrol√º
if grep -q '"privateKey": ""' "$CONFIG_FILE"; then
    echo -e "${RED}Private key bo≈ü!${NC}"
    rm -f "$UUIDS_FILE" "$KEYS_FILE"
    exit 1
fi

# Config test
CONFIG_TEST_OUTPUT=$(xray run -test -c "$CONFIG_FILE" 2>&1)
if echo "$CONFIG_TEST_OUTPUT" | grep -q "Configuration OK"; then
    echo -e "${GREEN}‚úì Config dosyasƒ± ge√ßerli${NC}"
else
    echo -e "${RED}Config dosyasƒ± hatalƒ±!${NC}"
    echo "$CONFIG_TEST_OUTPUT"
    rm -f "$UUIDS_FILE" "$KEYS_FILE"
    exit 1
fi

echo -e "${GREEN}[8/9] Firewall ayarlanƒ±yor...${NC}"

# UFW kur (yoksa)
if ! command -v ufw &> /dev/null; then
    apt install -y ufw
fi

# UFW ayarla
ufw --force enable
ufw default deny incoming
ufw default allow outgoing
ufw allow ${PORT}/tcp
ufw allow 22/tcp
ufw --force reload

echo -e "${GREEN}[9/9] Xray servisi ba≈ülatƒ±lƒ±yor...${NC}"

systemctl enable xray
systemctl restart xray
sleep 4

# Servis durumu kontrol
if ! systemctl is-active --quiet xray; then
    echo -e "${RED}Xray ba≈ülatƒ±lamadƒ±!${NC}"
    echo -e "${YELLOW}Son 30 log satƒ±rƒ±:${NC}"
    journalctl -u xray -n 30 --no-pager
    rm -f "$UUIDS_FILE" "$KEYS_FILE"
    exit 1
fi

echo -e "${GREEN}‚úì Xray ba≈üarƒ±yla √ßalƒ±≈üƒ±yor!${NC}"

# Port dinleme kontrol√º
if netstat -tulpn | grep -q ":${PORT}.*xray"; then
    echo -e "${GREEN}‚úì Port ${PORT} dinleniyor${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Port ${PORT} dinlenmiyor olabilir${NC}"
fi

# Baƒülantƒ± bilgileri dosyasƒ± olu≈ütur
INFO_FILE="/root/xray-reality-info.txt"

cat > "$INFO_FILE" << INFOEOF
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë          XRAY REALITY VPN - G√úVENLƒ∞ & HIZLI          ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üì° SUNUCU Bƒ∞LGƒ∞LERƒ∞:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
IP Adresi    : ${SERVER_IP}
Port         : ${PORT}
Protocol     : VLESS + XTLS-Reality
Destination  : ${DEST_SITE}
Kullanƒ±cƒ±    : ${USER_COUNT} adet

üîê REALITY ANAHTARLARI:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
Public Key   : ${PUBLIC_KEY}
Short ID     : ${SHORT_ID}

‚ö†Ô∏è  Bu anahtarlar client'ta gerekli! Kaydedin!

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

‚ú® √ñZELLƒ∞KLER:

‚úì DPI Bypass (Deep Packet Inspection)
‚úì √áok y√ºksek hƒ±z (XTLS-Vision)
‚úì Maksimum g√ºvenlik (Reality protokol√º)
‚úì Domain gerektirmez
‚úì Tespit edilmesi √ßok zor

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üîó CLIENT BAƒûLANTI Lƒ∞NKLERƒ∞:

INFOEOF

USER_NUM=0
while IFS= read -r UUID; do
    if [[ -z "$UUID" ]]; then
        continue
    fi
    
    USER_NUM=$((USER_NUM+1))
    
    CONNECTION_LINK="vless://${UUID}@${SERVER_IP}:${PORT}?encryption=none&flow=xtls-rprx-vision&security=reality&sni=${DEST_SITE}&fp=chrome&pbk=${PUBLIC_KEY}&sid=${SHORT_ID}&type=tcp&headerType=none#Reality-User${USER_NUM}"
    
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ" >> "$INFO_FILE"
    echo "Kullanƒ±cƒ± ${USER_NUM}:" >> "$INFO_FILE"
    echo "${CONNECTION_LINK}" >> "$INFO_FILE"
    echo "" >> "$INFO_FILE"
done < "$UUIDS_FILE"

cat >> "$INFO_FILE" << 'INFOEOF2'
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üì± CLIENT UYGULAMALAR:

Android:
  ‚Ä¢ v2rayNG    : https://github.com/2dust/v2rayNG/releases
  ‚Ä¢ Hiddify    : https://github.com/hiddify/hiddify-next/releases

iOS:
  ‚Ä¢ Shadowrocket (App Store - √úcretli)
  ‚Ä¢ Hiddify    : https://github.com/hiddify/hiddify-next/releases

Windows:
  ‚Ä¢ v2rayN     : https://github.com/2dust/v2rayN/releases
  ‚Ä¢ Hiddify    : https://github.com/hiddify/hiddify-next/releases

macOS:
  ‚Ä¢ V2Box (App Store)
  ‚Ä¢ Hiddify    : https://github.com/hiddify/hiddify-next/releases

Linux:
  ‚Ä¢ Nekoray    : https://github.com/MatsuriDayo/nekoray/releases

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

‚öôÔ∏è  BAƒûLANTI KURMA ADIMLAR:

1. Client uygulamasƒ±nƒ± indir ve y√ºkle
2. Yukarƒ±daki baƒülantƒ± linkini kopyala (vless://...)
3. Client'ta + butonuna bas
4. "Import from clipboard" veya "Scan QR" se√ß
5. Baƒülan!

‚ö†Ô∏è  Reality'de SNI deƒüi≈ütirilemez! Otomatik gelir.

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üîß Y√ñNETƒ∞M KOMUTLARI:

Durum kontrol     : systemctl status xray
Yeniden ba≈ülat    : systemctl restart xray
Durdur            : systemctl stop xray
Loglarƒ± g√∂r√ºnt√ºle : journalctl -u xray -f
Config test       : xray run -test -c /usr/local/etc/xray/config.json
Config d√ºzenle    : nano /usr/local/etc/xray/config.json

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üõ°Ô∏è  G√úVENLƒ∞K ƒ∞PU√áLARI:

1. Public Key ve Short ID'yi kimseyle payla≈üma
2. Sadece g√ºvendiƒüiniz ki≈üilere baƒülantƒ± linki ver
3. D√ºzenli olarak loglarƒ± kontrol et
4. Firewall'u kapatma
5. SSH portunu deƒüi≈ütirmeyi d√º≈ü√ºn

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üìä PERFORMANS ƒ∞Yƒ∞LE≈ûTƒ∞RME:

# BBR congestion control etkinle≈ütir (Ubuntu 22.04+)
echo "net.core.default_qdisc=fq" >> /etc/sysctl.conf
echo "net.ipv4.tcp_congestion_control=bbr" >> /etc/sysctl.conf
sysctl -p

# BBR kontrol√º
sysctl net.ipv4.tcp_congestion_control

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

‚ùì SORUN Gƒ∞DERME:

Client baƒülanamƒ±yor:
  ‚Üí Public key doƒüru mu kontrol et
  ‚Üí Short ID doƒüru mu kontrol et
  ‚Üí Sunucu IP ve port doƒüru mu
  ‚Üí Firewall a√ßƒ±k mƒ±: ufw status
  ‚Üí Servis √ßalƒ±≈üƒ±yor mu: systemctl status xray

Yava≈ü baƒülantƒ±:
  ‚Üí Farklƒ± destination dene
  ‚Üí BBR'yi etkinle≈ütir (yukarƒ±daki komutlar)
  ‚Üí Config'i test et: xray run -test -c /usr/local/etc/xray/config.json

Servis ba≈ülamƒ±yor:
  ‚Üí Loglarƒ± kontrol et: journalctl -u xray -n 50
  ‚Üí Config test et: xray run -test -c /usr/local/etc/xray/config.json
  ‚Üí Port kullanƒ±mda mƒ±: netstat -tulpn | grep PORT_NUMBER

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üîÑ G√úNCELLEME:

# Xray'i g√ºncelle
bash -c "$(curl -L https://github.com/XTLS/Xray-install/raw/main/install-release.sh)" @ install
systemctl restart xray

# Versiyonu kontrol et
xray version

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üóëÔ∏è  KALDIRMA:

# Xray'i tamamen kaldƒ±r
bash -c "$(curl -L https://github.com/XTLS/Xray-install/raw/main/install-release.sh)" @ remove --purge
rm -rf /usr/local/etc/xray
rm -rf /var/log/xray
rm -f /root/xray-reality-info.txt

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

Kurulum tarihi: $(date '+%Y-%m-%d %H:%M:%S')
Bilgiler dosyasƒ±: /root/xray-reality-info.txt

Bu dosyayƒ± g√ºvenli bir yerde sakla!

INFOEOF2

# Temp dosyalarƒ± temizle
rm -f "$UUIDS_FILE" "$KEYS_FILE"

echo ""
echo -e "${GREEN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
echo -e "${GREEN}‚ïë          REALITY KURULUMU BA≈ûARIYLA TAMAMLANDI!      ‚ïë${NC}"
echo -e "${GREEN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
echo ""
echo -e "${YELLOW}üîê REALITY ANAHTARLARI:${NC}"
echo -e "${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
echo -e "${GREEN}Public Key:${NC}  ${PUBLIC_KEY}"
echo -e "${GREEN}Short ID:${NC}    ${SHORT_ID}"
echo -e "${GREEN}Destination:${NC} ${DEST_SITE}"
echo -e "${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
echo ""
echo -e "${YELLOW}‚ö†Ô∏è  Bu anahtarlarƒ± kaydedin! Client'ta gerekli olacak.${NC}"
echo ""
echo -e "${BLUE}üìÑ T√ºm bilgiler ve baƒülantƒ± linkleri:${NC}"
echo -e "${GREEN}   ${INFO_FILE}${NC}"
echo ""
echo -e "${YELLOW}üìã Bilgileri g√∂r√ºnt√ºle:${NC}"
echo -e "${BLUE}   cat ${INFO_FILE}${NC}"
echo ""
echo -e "${GREEN}üîó CLIENT BAƒûLANTI Lƒ∞NKLERƒ∞:${NC}"
echo ""

USER_NUM=0
while IFS= read -r line; do
    if [[ $line == Kullanƒ±cƒ±* ]]; then
        echo -e "${YELLOW}${line}${NC}"
    elif [[ $line == vless://* ]]; then
        echo -e "${GREEN}${line}${NC}"
        echo ""
    fi
done < "$INFO_FILE"

echo -e "${GREEN}üöÄ Reality VPN hazƒ±r! ƒ∞yi kullanƒ±mlar!${NC}"
echo -e "${BLUE}üí° ƒ∞pucu: systemctl status xray komutuyla servis durumunu kontrol edebilirsiniz${NC}"
echo ""
